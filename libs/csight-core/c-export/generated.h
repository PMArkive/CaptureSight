#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdarg>
#include <cstddef>
#include <cstdint>
#include <cstdlib>
#include <ostream>
#include <new>
#include <cassert>


namespace csight {

static const size_t Spawn_DATA_SIZE = 56;

static const size_t den_t_SIZE = 24;

enum class SwshDenType {
  Vanilla = 0,
  IslandOfArmor = 1,
  CrownTundra = 2,
};

enum class RngType {
  Xoroshiro = 0,
  Xorshift = 1,
  Lcrng = 2,
};

enum class SupportedGame : uint64_t {
  Sword = 72246641462509568,
  Shield = 72213381238669312,
  BrilliantDiamond = 72057594337361920,
  ShiningPearl = 72084944689111040,
  Arceus = 72092022778863616,
  Scarlet = 72237707933630464,
  Violet = 72215236664745984,
};

struct den_t;

struct Lcrng;

struct pa8_t;

struct pk8_t;

struct pk9_t;

template<typename GameRng = void>
struct rng_tracker_t;

struct arceus_spawn_group_t;

struct Xoroshiro;

struct Xorshift;

using xoroshiro_tracker_t = rng_tracker_t<Xoroshiro>;

using xorshift_tracker_t = rng_tracker_t<Xorshift>;

using lcrng_tracker_t = rng_tracker_t<Lcrng>;

struct EggDetails {
  bool exists;
  uint64_t seed;
  int32_t step_count;

  bool operator==(const EggDetails& other) const {
    return exists == other.exists &&
           seed == other.seed &&
           step_count == other.step_count;
  }
};

struct BdspRoamer {
  int32_t area_id;
  uint32_t rng_seed_low;
  uint32_t rng_seed_high;
  uint32_t species;
  uint32_t hp;
  uint8_t level;
  uint32_t status;
  uint8_t encounter_status;

  bool operator==(const BdspRoamer& other) const {
    return area_id == other.area_id &&
           rng_seed_low == other.rng_seed_low &&
           rng_seed_high == other.rng_seed_high &&
           species == other.species &&
           hp == other.hp &&
           level == other.level &&
           status == other.status &&
           encounter_status == other.encounter_status;
  }
};

struct TrainerInfo {
  uint16_t tid;
  uint16_t sid;

  bool operator==(const TrainerInfo& other) const {
    return tid == other.tid &&
           sid == other.sid;
  }
};

struct Stats {
  uint8_t hp;
  uint8_t atk;
  uint8_t def;
  uint8_t spa;
  uint8_t spd;
  uint8_t spe;

  bool operator==(const Stats& other) const {
    return hp == other.hp &&
           atk == other.atk &&
           def == other.def &&
           spa == other.spa &&
           spd == other.spd &&
           spe == other.spe;
  }
};


extern "C" {

xoroshiro_tracker_t *arceus_get_main_rng_tracker();

size_t arceus_read_active_spawn_group_count();

pa8_t *arceus_read_party_pokemon(uint8_t index);

arceus_spawn_group_t *arceus_read_spawn_group(size_t index);

size_t arceus_read_spawn_group_count();

pa8_t *arceus_read_wild_pokemon(uint8_t index);

uint8_t arceus_read_wild_pokemon_count();

xorshift_tracker_t *bdsp_get_main_rng_tracker();

lcrng_tracker_t *bdsp_get_random_group_rng_tracker(size_t index);

void bdsp_read_egg_details(EggDetails *out);

pk8_t *bdsp_read_encounter_pokemon(uint8_t index);

uint32_t bdsp_read_encounter_pokemon_count();

pk8_t *bdsp_read_other_player_union_trade_pokemon();

pk8_t *bdsp_read_party_pokemon(uint8_t index);

uint32_t bdsp_read_party_pokemon_count();

void bdsp_read_roamer(BdspRoamer *out, size_t index);

size_t bdsp_read_roamer_count();

void bdsp_read_trainer_info(TrainerInfo *out);

pk8_t *bdsp_read_underground_pokemon(size_t index);

size_t bdsp_read_underground_pokemon_count();

bool den_is_active(den_t *ptr);

bool den_is_event(den_t *ptr);

uint64_t den_seed(den_t *ptr);

void den_shiny_details_string(den_t *ptr, char *dst, size_t dst_length);

void den_species_string(den_t *ptr, char *dst, size_t dst_length);

bool find_pa8_raid_seed(uint64_t *_out, pa8_t *_ptr);

bool find_pk8_raid_seed(uint64_t *out, pk8_t *ptr);

bool find_pk9_raid_seed(uint64_t *_out, pk9_t *_ptr);

void free_den(den_t *ptr);

void free_pa8(pa8_t *ptr);

void free_pk8(pk8_t *ptr);

void free_pk9(pk9_t *ptr);

void free_rng_tracker(void *ptr, RngType rng_type);

void free_spawn_group(arceus_spawn_group_t *ptr);

uint64_t get_rng_tracker_advances(void *ptr, RngType rng_type);

size_t get_rng_tracker_state_count(RngType rng_type);

size_t get_rng_tracker_state_item_size(RngType rng_type);

void get_small_gender_string(uint8_t gender_num, char *dst, size_t dst_length);

void get_species_string(uint16_t species_num, char *dst, size_t dst_length);

/// Initializes the library
/// # Safety
/// The caller must guarantee this is called at least once, but only once.
void init();

uint8_t pa8_ability_number(pa8_t *ptr);

void pa8_ability_string(pa8_t *ptr, char *dst, size_t dst_length);

uint8_t pa8_current_friendship(pa8_t *ptr);

uint32_t pa8_encryption_constant(pa8_t *ptr);

Stats pa8_evs(pa8_t *ptr);

uint8_t pa8_gender(pa8_t *ptr);

bool pa8_is_egg(pa8_t *ptr);

bool pa8_is_shiny(pa8_t *ptr);

Stats pa8_ivs(pa8_t *ptr);

uint8_t pa8_language(pa8_t *ptr);

void pa8_minted_nature_string(pa8_t *ptr, char *dst, size_t dst_length);

void pa8_move1_string(pa8_t *ptr, char *dst, size_t dst_length);

void pa8_move2_string(pa8_t *ptr, char *dst, size_t dst_length);

void pa8_move3_string(pa8_t *ptr, char *dst, size_t dst_length);

void pa8_move4_string(pa8_t *ptr, char *dst, size_t dst_length);

void pa8_nature_string(pa8_t *ptr, char *dst, size_t dst_length);

uint32_t pa8_pid(pa8_t *ptr);

uint16_t pa8_sid(pa8_t *ptr);

void pa8_species_string(pa8_t *ptr, char *dst, size_t dst_length);

uint16_t pa8_tid(pa8_t *ptr);

uint8_t pk8_ability_number(pk8_t *ptr);

void pk8_ability_string(pk8_t *ptr, char *dst, size_t dst_length);

uint8_t pk8_current_friendship(pk8_t *ptr);

uint32_t pk8_encryption_constant(pk8_t *ptr);

Stats pk8_evs(pk8_t *ptr);

uint8_t pk8_gender(pk8_t *ptr);

bool pk8_is_egg(pk8_t *ptr);

bool pk8_is_shiny(pk8_t *ptr);

Stats pk8_ivs(pk8_t *ptr);

uint8_t pk8_language(pk8_t *ptr);

void pk8_minted_nature_string(pk8_t *ptr, char *dst, size_t dst_length);

void pk8_move1_string(pk8_t *ptr, char *dst, size_t dst_length);

void pk8_move2_string(pk8_t *ptr, char *dst, size_t dst_length);

void pk8_move3_string(pk8_t *ptr, char *dst, size_t dst_length);

void pk8_move4_string(pk8_t *ptr, char *dst, size_t dst_length);

void pk8_nature_string(pk8_t *ptr, char *dst, size_t dst_length);

uint32_t pk8_pid(pk8_t *ptr);

uint16_t pk8_sid(pk8_t *ptr);

void pk8_species_string(pk8_t *ptr, char *dst, size_t dst_length);

uint16_t pk8_tid(pk8_t *ptr);

uint8_t pk9_ability_number(pk9_t *ptr);

void pk9_ability_string(pk9_t *ptr, char *dst, size_t dst_length);

uint8_t pk9_current_friendship(pk9_t *ptr);

uint32_t pk9_encryption_constant(pk9_t *ptr);

Stats pk9_evs(pk9_t *ptr);

uint8_t pk9_gender(pk9_t *ptr);

bool pk9_is_egg(pk9_t *ptr);

bool pk9_is_shiny(pk9_t *ptr);

Stats pk9_ivs(pk9_t *ptr);

uint8_t pk9_language(pk9_t *ptr);

void pk9_minted_nature_string(pk9_t *ptr, char *dst, size_t dst_length);

void pk9_move1_string(pk9_t *ptr, char *dst, size_t dst_length);

void pk9_move2_string(pk9_t *ptr, char *dst, size_t dst_length);

void pk9_move3_string(pk9_t *ptr, char *dst, size_t dst_length);

void pk9_move4_string(pk9_t *ptr, char *dst, size_t dst_length);

void pk9_nature_string(pk9_t *ptr, char *dst, size_t dst_length);

uint32_t pk9_pid(pk9_t *ptr);

uint16_t pk9_sid(pk9_t *ptr);

void pk9_species_string(pk9_t *ptr, char *dst, size_t dst_length);

uint16_t pk9_tid(pk9_t *ptr);

void read_rng_tracker_state(uint64_t *out,
                            size_t *out_count,
                            size_t max_out,
                            void *ptr,
                            RngType rng_type);

uint64_t spawn_group_get_seed(arceus_spawn_group_t *ptr);

void spawn_group_get_spawn_pair_seeds(arceus_spawn_group_t *ptr,
                                      uint64_t *seed0,
                                      uint64_t *seed1,
                                      size_t index);

pk9_t *sv_read_party_pokemon(uint8_t index);

uint64_t sv_read_top_level_raid_seed();

xoroshiro_tracker_t *swsh_get_main_rng_tracker();

den_t *swsh_read_den(bool is_sword, size_t index, SwshDenType den_type);

pk8_t *swsh_read_party_pokemon(uint8_t index);

pk8_t *swsh_read_raid_pokemon();

pk8_t *swsh_read_trade_pokemon();

void swsh_read_trainer_info(TrainerInfo *out);

pk8_t *swsh_read_wild_legend_pokemon();

pk8_t *swsh_read_wild_pokemon();

} // extern "C"

} // namespace csight
